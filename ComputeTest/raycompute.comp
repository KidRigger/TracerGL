#version 440 core

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding=0) uniform image2D img_output;

#define NUM_SAMPLES 8
#define MAX_DEPTH 10

struct Ray {
	vec3 A;
	vec3 B;
};

struct Sphere {
	vec3 C;
	float R;
};

vec4 color(Ray r);

struct Camera {
	vec3 lower_left;
	vec3 horz;
	vec3 vert;
	vec3 origin;
};

Ray GetRay(Camera cam, float x, float y);

uint rng_state;
uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

const float inv_int_max = (1.0f/4294967296.0);

uint rand_xorshift()
{
    // Xorshift algorithm from George Marsaglia's paper
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}
//
//uint rand_lcg()
//{
//    // LCG values from Numerical Recipes
//    rng_state = 1664525 * rng_state + 1013904223;
//    return rng_state;
//}
//
float rng() {
	return rand_xorshift() * inv_int_max;
}

vec3 RandomInUnitSphere();

void main() {

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 dims = imageSize(img_output);

	rng_state = wang_hash(0x1603AB + wang_hash(gl_GlobalInvocationID.x + wang_hash(gl_GlobalInvocationID.y)));
	
	Camera cam;
	cam.lower_left = vec3(-2.0f, -1.0f, -1.0f);
	cam.horz = vec3(4.0f, 0.0f, 0.0f);
	cam.vert = vec3(0.0f, 2.0f, 0.0f);
	cam.origin = vec3(0.0f);

	vec4 pixel = vec4(0.0f);
	for (int i = 0; i < NUM_SAMPLES; i++) {
		float x = (pixel_coords.x + rng())/float(dims.x);
		float y = (pixel_coords.y + rng())/float(dims.y);
		Ray r = GetRay(cam, x, y);
		pixel += color(r);
	}

	pixel /= NUM_SAMPLES;

	imageStore(img_output, pixel_coords, pixel);

}

struct HitInfo {
	bool hit;
	vec3 hitpoint;
	float t;
	vec3 normal;
};

HitInfo hit_sphere(Sphere s, Ray r);

#define NUM_SPHERES 2
Sphere sph[] = {
	{vec3(0,0,-1), 0.5f},
	{vec3(0,-1000.5,-1), 1000.0f}
};

Ray GetRay(Camera cam, float x, float y)  {
	Ray r = {cam.origin, (cam.lower_left + x*cam.horz + y*cam.vert)};
	return r;
}

HitInfo WorldHit(Ray r) {
	HitInfo hmin;
	hmin.hit = false;
	hmin.t = 1000.0f;
	for (int i = 0; i < NUM_SPHERES; i++) {
		HitInfo h = hit_sphere(sph[i],r);
		if (h.hit) {
			if (hmin.t > h.t && h.t > 0.00001f) {
				hmin = h;
			}
		}
	}
	return hmin;
}

vec4 color(Ray r) {

	vec3 color = vec3(1.0f);
	
	for (int depth = 0; depth < MAX_DEPTH; depth++) {
		HitInfo h = WorldHit(r);
		if (h.hit) {
			color *= vec3(0.5f);
			r.A = h.hitpoint;
			r.B = RandomInUnitSphere() + h.normal;
		} 
		else {
			float t = 0.5f * (normalize(r.B).y + 1.0f);
			color*= ((1.0f-t)*vec3(1.0f) + t * vec3(0.5f, 0.7f, 1.0f));
			break;
		}
	}
	return vec4(color, 1.0f);
}

HitInfo hit_sphere(Sphere s, Ray r) {
	vec3 oc = r.A - s.C;
	float a = dot(r.B, r.B);
	float b = 2.0f * dot(oc, r.B);
	float c = dot(oc, oc) - s.R*s.R;
	float disc = b*b - 4*a*c;
	HitInfo h;
	h.hit = (disc >= 0.0f);
	if (!h.hit) {
		return h;
	}
	h.t = (-b - sqrt(disc))/(2.0f*a);
	if (h.t < 0.0f) {
		h.hit = false;
		return h;
	}
	h.hitpoint = r.A + h.t * r.B;
	h.normal = normalize(h.hitpoint - s.C);
	return h;
}

vec3 RandomInUnitSphere() {
	vec3 point = vec3(1.0f);
	do {
		point = vec3(rng(),rng(),rng());
	} while (length(point) >= 1.0f);

	return point;
}
